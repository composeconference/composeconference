{
  "show-level": true,
  "times": [
    {
      "time": "Morning",
      "heading": "Talks",
      "id": "talks",
      "blurb": "Monday 2 September 2019",
      "location": "<a href='https://goo.gl/maps/bZ13aL7EVm32'>RMIT - Building 80</a>"
    },
    {
      "time": "8am",
      "name": "<hr />",
      "id": "t-0800",
      "title": "Registration",
      "break": true
    },
    {
      "time": "9am",
      "name": "Ken Scambler",
      "id": "introduction",
      "title": "Introduction by the Committee",
      "details": "Welcome to Melbourne :: Compose!",
      "committee": true
    },

    {
      "id": "ambrose_bonnaire-sergeant",
      "name": "Ambrose Bonnaire-Sergeant",
      "img": "/assets/img/2019-melbourne/ambrose_bonnaire-sergeant.jpg",
      "title": "",
      "abstract":
        "",
      "time": "9:15am",
      "home": "https://ambrosebs.com",
      "github": "frenchy64",
      "twitter": "ambrosebs",
      "level": 1,
      "bio":
      "\"I understand the world by identifying and teaching the essence of important ideas. With computers, I tend towards the design and implementation of programming languages. Recently, I dissertated on extending the Clojure programming language with a static type system.\""
    },
    {
      "time": "10:00am",
      "title": "Break",
      "name": "<hr />",
      "id": "break1",
      "break": true
    },
    {
      "time": "10:15am",
      "id": "svetlana-marina",
      "name": "Svetlana Marina",
      "img": "/assets/img/2019-melbourne/svetlana_marina.jpg",
      "title": "Day-to-Day Property Based Testing in Scala",
      "abstract":
        "Property-based testing is a popular testing concept, which came from the world of Functional Programming. QuickCheck in Haskell is an iconic framework, which introduced us to this idea. Today we can find testing libraries supporting PBT in any main-stream languages, including Scala, JavaScript, Ruby, Python, Java, etc. <br /><br /> We all like the idea of building high quality and robust code, covering all the possible and impossible edge cases. Maybe this is why many of us are getting hooked on the Property-based testing approach or at least we are not opposed to try it out.<br /><br /> It gives us an ability to run a single test case hundreds of times on a large range of data, covering edge cases we’ve never thought we had in the first place.<br /><br /> However, if you are like me and your day-to-day job is to create an API and save data into a database or maybe even send it over to another API, you also probably struggled to come up with a good application of this practice. It is easy and “very useful” to test that a reverse of a collection is still working. But, when it comes to if-else conditions, we find it hard to come up with the right property to test. <br /><br /> In this talk I would like to focus on a practical application of this concept, presenting some examples in ScalaCheck. I will start with a summary of what Property-based testing (PBT) framework equips you with and what should you expect from it. There will be basic examples demonstrating the power of PBT. But mostly, I will cover existing patterns and tips you can take to your normal life projects and use them to leverage this PBT tool.",
      "home": "https://svetixbot.github.io/me/",
      "github": "Svetixbot",
      "twitter": "svetixbot",
      "level": 1,
      "bio":
        "Svetlana is a Software Engineer at ThoughtWorks. She likes delivering software into production and making this a joyful process. She's is a polyglot and during her career she had a chance to work with quite a set of different languages. The most impactful of them for her was Scala, which introduced her to the world of functional programming. Since then, she always tried to adopt FP concepts on her projects, even if they were in the mainstream non-fp languages."
    },
    {
      "time": "10:45am",
      "id": "brendan-zabarauskas",
      "name": "Brendan Zabarauskas",
      "img": "/assets/img/2019-melbourne/brendan_zabarauskas.jpg",
      "title": "Lost in a Universe of Types: My Adventures in Programming Languages",
      "abstract":
        "Programming language design is kind of like world building. This is what  initially got me excited about it! In this talk I'll take you on journey,  showing how I originally became excited about programming languages as a  result of my artistic interests. I'll then cover why we are excited about  programming languages and dependent types at YesLogic, and share some of the  struggles I've had in applying academic research to industrial problems.",
      "home": "https://voyager3.tumblr.com/",
      "github": "brendanzab",
      "twitter": "brendanzab",
        "level": 2,
      "bio":
        "With a background in communication design, illustration, generative art, and open source software development, Brendan is fascinated by the intersection of art, design, mathematics and computer science. His current focus is on exploring how programming languages and type systems can be used as a tool for designing safer, more robust, and friendly software. This involves keeping abreast of past and present academic research and figuring out ways to integrate this into industrial applications. He currently works at YesLogic, building a dependently typed domain specific language for describing binary data formats.",
    },
    {
      "time": "11:15am",
      "title": "Break",
      "name": "<hr />",
      "id": "break2",
      "break": true
    },
    {
      "time": "11:30am",
      "id": "jack-kelly",
      "name": "Jack Kelly",
      "img": "/assets/img/2019-melbourne/jack_kelly.jpg",
      "title": "Reflex Outside the Browser",
      "abstract":
        "Functional Reactive Programming (FRP) is often introduced by discussing events and behaviors, and how to transform and mix them. But once you understand the primitives, what do you do with them? Where do the first events come from, and how do you wire these parts into a larger whole? <br /><br />FRP promises benefits in more domains than just user interfaces, so let's take a look at Reflex outside its most common habitat of web frontends. There's now a fairly up-to-date version of Reflex on Hackage, so we can play with it right away and leave GHCjs, Reflex-DOM, special build tools, and the custom nix frameworks for later. <br /><br />An FRP network of events and behaviors runs inside a library called a \"host\", which interfaces between the FRP network and the outside world. Using an interactive OpenGL program as our example, we'll explore how a slightly larger reactive program hangs together, and how it uses the host's features to do what it needs to do.",
      "home": "https://jackkelly.name/",
      "github": "https://git.sr.ht/~jack",
      "twitter": "",
      "level": 3,
      "bio":
        "Jack is a Haskell enthusiast, lapsed tall-ship sailor and member of the Queensland FP Lab. He has tutored functional programming at universities and for industrial programmers, and loves seeing the lightbulb go on above people's heads. Jack became frustrated trying to reason about imperative code in dynamic languages, decided that Haskell looked like a good tool to solve business problems and followed a path through Data61 to the QFPL's door."
    },
    {
      "time": "12:00pm",
      "id": "george-wilson",
      "name": "George Wilson",
      "img": "/assets/img/2019-melbourne/george_wilson.jpg",
      "title": "An Intuition for Propagators",
      "abstract":
        "The propagator model of computation developed by Radul and Sussman consists of stateful cells connected by independent stateless machines called propagators. These propagator networks are a helpful way to structure or think about computations, particularly those that are concurrent or distributed. <br /><br />This talk will give an intuition for what these propagator networks look like, why they work, and how we can use them to build programs. Efficient implementation will not be covered. <br /><br />The Haskell community has recently seen concurrency abstractions bearing similarities to propagators, such as the work on LVars by Kuper and Newton; and also projects directly influenced by propagators, such as Edward Kmett's recent work.",
      "home": "http://wils.online/",
      "github": "gwils",
      "twitter": "GeorgeTalksCode",
      "level": 3,
      "bio":
        "George Wilson is an enthusiastic functional programmer from Brisbane, Australia. He works on open source Haskell projects and educational material at the Queensland Functional Programming Lab inside Data61. George is also a member of the Haskell Core Libraries Committee and the Haskell.org Committee."
    },
    {
      "time": "12:30pm",
      "title": "Lunch",
      "id": "lunch",
      "name": "<hr />",
      "break": true
    },

    {
      "time": "12:30-17:00",
      "heading": "Hang Out and Hack Room",
      "id": "hand-out-and-hack",
      "blurb":
	"Our Hang Out and Hack room will include: \"office hours\" (people can request help on particular topics, or offer to help others); lightning talks, free discussion and of course &mdash; hanging out and hacking&hellip; Bring your laptop!",
      "location": "TBC"
    },

    {
      "time": "13:30~15:30",
      "heading": "Unconference",
      "id": "unconference",
      "blurb":
	"The unconference is like open-mic for hackers. It's open for anyone to do a talk, just add your name to the list near the registration desk on the day of the conference.",
      "location": "<a href='https://goo.gl/maps/bZ13aL7EVm32'>RMIT - Building 80</a>"
    },

]
}

_storeaway = [
    {
      "hide_toc": true,
      "time": "9am",
      "id": "day-two-registration",
      "name": "<hr />",
      "title": "Registration",
      "break": true
    },
    {
      "hide_toc": true,
      "time": "10am-12pm",
      "id": "lyndon_maydwell",
      "name": "Lyndon Maydwell",
      "title": "WORKSHOP - CRASHKELL",
      "twitter": "ConSord",
      "bio": "Lyndon works at Silverpond as a project manager / architect / janitor and has run Haskell workshops for the past 5 years. Endorse him on <a href='https://www.linkedin.com/in/lyndon-maydwell-01455723/'>Linkedin!</a>",
      "abstract": "The feedback from last-year's Haskell workshop was clear: \"Less Talking, More Typing!\". In response to this, I have reworked the content to... <p/> <ul> <li> Be instantly accessible via the web, with no setup required </li> <li> Have no lecture material, being composed entirely of exercises </li> <li> Progressively teach concepts without requiring jumping around</li> <li> Be completely broken! Every exercise will crash, requiring debugging</li> </ul> <p/> Skeptical? Come along and find out if this was a terrible idea!<br><br><strong>Note:</strong> This is an introductory workshop. Please bring a laptop with a modern web-browser.",
      "img": "/assets/img/2019-melbourne/lyndon_maydwell.jpg"
    },
    {
      "hide_toc": true,
      "time": "10am-5pm",
      "id": "david_laing",
      "name": "David Laing",
      "title": "WORKSHOP - Front-end development with Reflex",
      "bio": "Dave is a programmer working at the Queensland Functional Programming Lab. <p/> He is mostly interested in programming language theory, functional reactive programming, Nix, session types, and various other bits and pieces of mathematics and theory associated with functional programming. <p/> He is also passionate about spreading all of this knowledge, mostly by giving talks and writing blog posts and other training material, but also via talking to people at conferences, in pubs, and during elevator rides.",
      "abstract": "There has been a lot of excitement about Functional Reactive Programming (FRP). <p/> Most of it has been about distant relatives of the original idea, which are nowhere near as powerful or as useful. The `reflex` library -- and the companion `reflex-dom` library -- were created in order to use FRP to do front-end development using Haskell. This workshop will give you hands-on experience with these libraries. <p/> The workshop will show attendees a new way to manage state and time-dependent logic, with significant benefits over the standard approaches when it comes to abstraction, composition and correctness. It will also make the case that when these ideas are applied to front-end development, they lead to something beyond what is delivered by libraries like `react` and `redux`.",
      "img": "/assets/img/2019-melbourne/david_laing.jpg"
    },
    {
      "hide_toc": true,
      "time": "1pm-2:30pm",
      "id": "rob_howard",
      "name": "Rob Howard",
      "title": "WORKSHOP - Building a Small Compiler in JavaScript",
      "twitter": "damncabbage",
      "bio": "Hi! I'm Rob, and I'm a web developer who currently switches between Elixir, Ruby and TypeScript at work up in sunny Sydney. Having so far made a career from learning and mixing the nice parts from different programming languages, I love nothing better than to help programming communities to learn more from each other, and become more welcoming for newcomers.",
      "abstract": "\"Compilers\" are usually-mysterious things that a lot of us actually use and rely on from day to day, eg. the JavaScript V8 compiler, the TypeScript compiler, or the Clang+LLVM compilers. Digging into how these work can be satisfying (like sleuthing a good puzzle); but some of the ways we implement them can appear in other forms, such as when validating user input, transforming big structures, or when separating side-effects from business logic. <p/> This workshop will comprise of a short talk that introduces the main parts of a compiler, followed by an at-your-own-pace tour through building a little one of your own. We'll start with a simple language that compiles to JavaScript. <p/> We'll be stepping through: <ul> <li>Tokenising (taking a string and turning it into a bunch of symbols),</li> <li>Token Parsing (taking these symbols and turning it into a representation of a program), and</li> <li>Code Generating (taking that representation and turning it into, in this case, JavaScript).</li> </ul> <p/> This workshop is for people who are already somewhat familiar with JavaScript (just the language itself, not any particular library or framework). <p/> To get going you only need this repository, a Terminal / Console, Node.js 8+, and a text editor of your choice. <p/> <h3>Prerequisites</h3> <ul> <li>Node.js 8+ (if you don't have it, then visit the Node.js download page, or use your package manager to install it, eg. Homebrew on macOS).</li> <li>The workshop repository at <a href='https://github.com/damncabbage/js-compiler-workshop'>https://github.com/damncabbage/js-compiler-workshop</a>. (Copies will be provided at the workshop as well.)</li> </ul> ",
      "img": "/assets/img/2019-melbourne/rob_howard.jpg"
    },
    {
      "hide_toc": true,
      "time": "3pm-5pm",
      "id": "luke_stephenson",
      "name": "Luke Stephenson",
      "title": "WORKSHOP - Monix adventures",
      "twitter": "lukestephenson8",
      "bio": "Lead Developer at REA. 3 years commercial Scala experience.<p/>On the Melbourne Scala User Group committee.",
      "abstract": "An introduction to Monix Task and Observable. Both are introduced through a series of problems which need to be solved using Monix APIs.  Tests are provided so participants can see progress and know the solution works. <p/> So far I've run the Task exercises internally at REA and 1 hour was sufficient for that.  I suspect another hour will cover the Observable exercises (which I'm still working on).  <a href='https://github.com/lukestephenson/monix-adventures'>https://github.com/lukestephenson/monix-adventures</a><p/><h3>Prerequisites</h3>Sbt, intellij (or editor of choice)",
      "img": "/assets/img/2017-melbourne/luke_stephenson.jpg"
    }
]
