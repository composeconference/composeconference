{
  "show-level": true,
  "times": [
    {
      "time": "Morning",
      "heading": "Talks",
      "id": "talks",
      "blurb": "Monday 2 September 2019",
      "location": "<a href='https://goo.gl/maps/bZ13aL7EVm32'>RMIT - Building 80</a>"
    },
    {
      "time": "8am",
      "name": "<hr />",
      "id": "t-0800",
      "title": "Registration",
      "break": true
    },
    {
      "time": "9am",
      "name": "Ken Scambler",
      "id": "introduction",
      "title": "Introduction by the Committee",
      "details": "Welcome to Melbourne :: Compose 2019!",
      "committee": true
    },

    {
      "id": "ambrose_bonnaire-sergeant",
      "name": "Ambrose Bonnaire-Sergeant",
      "img": "/assets/img/2019-melbourne/ambrose_bonnaire-sergeant.jpg",
      "title": "The Hidden Data Flow in Types",
      "abstract":
        "On the surface, function types simply describe inputs and outputs&mdash;indeed, that's how they're used in most type systems. But there's more to function types!<br /><br /> Fascinatingly, a function type can be transformed into a data flow graph that predicts the inner workings of any function that has that type. Using this graph, intricate dependencies between function inputs and outputs can be inferred without having to read code or documentation.<br /><br /> In this talk you will learn how to see function types in a different light, gaining clairvoyant powers to predict how their implementations behave.<br /><br /> We will cover how this insight enables the impressive type inference of <a href='https://flow.org/'>Flow</a> and <a href='https://www.cl.cam.ac.uk/~sd601/mlsub/'>MLsub</a>, and explore possible future applications to other languages like <a href='https://www.typescriptlang.org/'>TypeScript</a>, <a href='https://docs.racket-lang.org/ts-guide/'>Typed Racket</a>, and <a href='https://typedclojure.org/'>Typed Clojure</a>.",
      "time": "9:15am",
      "home": "https://ambrosebs.com",
      "github": "frenchy64",
      "twitter": "ambrosebs",
      "level": 2,
      "bio":
      "I understand the world by identifying and teaching the essence of important ideas. With computers, I tend towards the design and implementation of programming languages. Recently, I dissertated on extending the Clojure programming language with a static type system.<br /><br /><a href='https://ambrosebs.com/'>Home Page</a>"
    },
    {
      "time": "10:00am",
      "title": "Break",
      "name": "<hr />",
      "id": "break1",
      "break": true
    },
    {
      "time": "10:15am",
      "id": "svetlana-marina",
      "name": "Svetlana Marina",
      "img": "/assets/img/2019-melbourne/svetlana_marina.jpg",
      "title": "Day-to-Day Property Based Testing in Scala",
      "abstract":
        "Property-based testing is a popular testing concept, which came from the world of Functional Programming. QuickCheck in Haskell is an iconic framework, which introduced us to this idea. Today we can find testing libraries supporting PBT in any main-stream languages, including Scala, JavaScript, Ruby, Python, Java, etc. <br /><br /> We all like the idea of building high quality and robust code, covering all the possible and impossible edge cases. Maybe this is why many of us are getting hooked on the Property-based testing approach or at least we are not opposed to try it out.<br /><br /> It gives us an ability to run a single test case hundreds of times on a large range of data, covering edge cases we’ve never thought we had in the first place.<br /><br /> However, if you are like me and your day-to-day job is to create an API and save data into a database or maybe even send it over to another API, you also probably struggled to come up with a good application of this practice. It is easy and “very useful” to test that a reverse of a collection is still working. But, when it comes to if-else conditions, we find it hard to come up with the right property to test. <br /><br /> In this talk I would like to focus on a practical application of this concept, presenting some examples in ScalaCheck. I will start with a summary of what Property-based testing (PBT) framework equips you with and what should you expect from it. There will be basic examples demonstrating the power of PBT. But mostly, I will cover existing patterns and tips you can take to your normal life projects and use them to leverage this PBT tool.",
      "home": "https://svetixbot.github.io/me/",
      "github": "Svetixbot",
      "twitter": "svetixbot",
      "level": 1,
      "bio":
        "Svetlana is a Software Engineer at ThoughtWorks. She likes delivering software into production and making this a joyful process. She's is a polyglot and during her career she had a chance to work with quite a set of different languages. The most impactful of them for her was Scala, which introduced her to the world of functional programming. Since then, she always tried to adopt FP concepts on her projects, even if they were in the mainstream non-fp languages."
    },
    {
      "time": "10:45am",
      "id": "brendan-zabarauskas",
      "name": "Brendan Zabarauskas",
      "img": "/assets/img/2019-melbourne/brendan_zabarauskas.jpg",
      "title": "Lost in a Universe of Types: My Adventures in Programming Languages",
      "abstract":
        "Programming language design is kind of like world building. This is what  initially got me excited about it! In this talk I'll take you on journey,  showing how I originally became excited about programming languages as a  result of my artistic interests. I'll then cover why we are excited about  programming languages and dependent types at YesLogic, and share some of the  struggles I've had in applying academic research to industrial problems.",
      "home": "https://voyager3.tumblr.com/",
      "github": "brendanzab",
      "twitter": "brendanzab",
        "level": 2,
      "bio":
        "With a background in communication design, illustration, generative art, and open source software development, Brendan is fascinated by the intersection of art, design, mathematics and computer science. His current focus is on exploring how programming languages and type systems can be used as a tool for designing safer, more robust, and friendly software. This involves keeping abreast of past and present academic research and figuring out ways to integrate this into industrial applications. He currently works at YesLogic, building a dependently typed domain specific language for describing binary data formats.",
    },
    {
      "time": "11:15am",
      "title": "Break",
      "name": "<hr />",
      "id": "break2",
      "break": true
    },
    {
      "time": "11:30am",
      "id": "jack-kelly",
      "name": "Jack Kelly",
      "img": "/assets/img/2019-melbourne/jack_kelly.jpg",
      "title": "Reflex Outside the Browser",
      "abstract":
        "Functional Reactive Programming (FRP) is often introduced by discussing events and behaviors, and how to transform and mix them. But once you understand the primitives, what do you do with them? Where do the first events come from, and how do you wire these parts into a larger whole? <br /><br />FRP promises benefits in more domains than just user interfaces, so let's take a look at Reflex outside its most common habitat of web frontends. There's now a fairly up-to-date version of Reflex on Hackage, so we can play with it right away and leave GHCjs, Reflex-DOM, special build tools, and the custom nix frameworks for later. <br /><br />An FRP network of events and behaviors runs inside a library called a \"host\", which interfaces between the FRP network and the outside world. Using an interactive OpenGL program as our example, we'll explore how a slightly larger reactive program hangs together, and how it uses the host's features to do what it needs to do.",
      "home": "https://jackkelly.name/",
      "github": "https://git.sr.ht/~jack",
      "twitter": "",
      "level": 3,
      "bio":
        "Jack is a Haskell enthusiast, lapsed tall-ship sailor and member of the Queensland FP Lab. He has tutored functional programming at universities and for industrial programmers, and loves seeing the lightbulb go on above people's heads. Jack became frustrated trying to reason about imperative code in dynamic languages, decided that Haskell looked like a good tool to solve business problems and followed a path through Data61 to the QFPL's door."
    },
    {
      "time": "12:00pm",
      "id": "george-wilson",
      "name": "George Wilson",
      "img": "/assets/img/2019-melbourne/george_wilson.jpg",
      "title": "An Intuition for Propagators",
      "abstract":
        "The propagator model of computation developed by Radul and Sussman consists of stateful cells connected by independent stateless machines called propagators. These propagator networks are a helpful way to structure or think about computations, particularly those that are concurrent or distributed. <br /><br />This talk will give an intuition for what these propagator networks look like, why they work, and how we can use them to build programs. Efficient implementation will not be covered. <br /><br />The Haskell community has recently seen concurrency abstractions bearing similarities to propagators, such as the work on LVars by Kuper and Newton; and also projects directly influenced by propagators, such as Edward Kmett's recent work.",
      "home": "http://wils.online/",
      "github": "gwils",
      "twitter": "GeorgeTalksCode",
      "level": 3,
      "bio":
        "George Wilson is an enthusiastic functional programmer from Brisbane, Australia. He works on open source Haskell projects and educational material at the Queensland Functional Programming Lab inside Data61. George is also a member of the Haskell Core Libraries Committee and the Haskell.org Committee."
    },
    {
      "time": "12:30pm",
      "title": "Lunch",
      "id": "lunch",
      "name": "<hr />",
      "break": true
    },
    {
      "time": "13:30-17:00",
      "id": "ken-ben",
      "name": "Ben Hutchison",
      "name2": "Ken Scambler",
      "img": "/assets/img/2019-melbourne/ben_hutchison.jpg",
      "img2": "/assets/img/2019-melbourne/ken_scambler.jpg",
      "title": "WORKSHOP - Getting started with Scala 3",
      "abstract":
        "Over the last 16 years, Scala has become one of the most widely used FP languages, and has had a profound influence on newer languages like Swift, Kotlin and recent versions of Java and C#. <br/><br/> It is also about to receive a dramatic overhaul! Scala 3, due to be released next year, adds, modifies and deletes dozens of features currently in Scala 2. These aim to simplify common workflows, discourage bad practices, encourage good practices, and in some cases, are bold innovations. The current beta version is not yet production-level stable, but the feature set is expected to largely be the same for general release. <br/> <br/> Let's learn it! <br/> <br/> Whether you're a grizzled Scala veteran or new to Scala & FP, this workshop will help you get going with Scala 3, get familiar with the features and how to use them.",
      "level": 2,
      "bio":
        "Ben Hutchison is a software engineer of 20 years experience with a passion for the craft of programming. He works as a Software Architect at Seek in Melbourne. Ben founded and has co-organized the Melbourne Scala Meetup since 2009. He is a open-source contributor to the Scala core libraries and the Typelevel ecosystem.",
      "bio2":
        "Ken is a longtime advocate of functional programming, types & category theory, and a co-organiser of the Melbourne Scala Users Group. Based in Melbourne, he is currently a software architect at MYOB."
    },
    {
      "time": "13:30-17:00",
      "id": "lyndon-maydwell",
      "name": "Lyndon Maydwell",
      "img": "/assets/img/2019-melbourne/lyndon_maydwell.jpg",
      "title": "WORKSHOP - Crashkell",
      "abstract":
        "As part of Melbourne :: Compose 2019 I'm running - for the second time - a short introductory Haskell workshop called 'Crashkell'. <br/><br/> Over the last few years I've run previous versions of the workshop, but based on past feedback… <br/><br/> 'Less Talking, More Typing!' <br/><br/> I reworked the content to…<br/><br/><ul> <li> Be instantly accessible via the web, with no setup required </li> <li> Have no lecture material, being composed entirely of exercises </li> <li> Progressively teach concepts without requiring jumping around </li> <li> Be completely broken! Every exercise will crash, requiring debugging </li> </ul><br/>Crashkell leverages Jupyter notebooks and the MyBinder platform to allow attendees to be up and running instantly. Jump directly into exercises with no section introductions and get immediate feedback inline, without the requirement to install any tools.<br/><br/>About the format of the workshop - The examples are broken by design. The flow of interaction is to run the exercise, look at the error, and work towards fixing the error while considering the meaning, and the motivation of the exercise. This is a great way to learn for a few reasons…<br/><br/> <ul><li> It prevents you from skipping through the code without reading </li><li> It teaches you how to interpret the languages error messages </li><li> It removes anxiety about breaking the code, since it starts broken </li><li> It facilitates discussion among groups of attendees </li><li> And finally, It forces the content author to consider the order of the introduction of concepts </li></ul><br/>I look forward to seeing you there!",
      "level": 1,
      "bio":
        "Lyndon is currently head of engineering at Silverpond. Having joined the company 6 years ago, over this time he has been instrumental in transforming the agency from a handful of software and technology experts to the leading AI delivery specialists in Melbourne. A large part of this has been due to his commitment to a full-stack competency within Silverpond - providing not only the ability to crack the core of difficult problems requiring the application of cutting edge research, but also the buildout of instrumentation, integration, interfaces, deployment, and support required to take ideas to market. He has a strong interest in the analysis of building software quickly and correctly and as such has been a central figure in the functional-programming community - helping organise Melbourne's first non-academic conference in this field. This focus is tempered with the necessary pragmatism to work with clients on aggressive timelines to deliver in make-or-break scenarios. His diverse experience across search, ontologies, ISP tech, graph problems, distributed systems, web, and AI make it likely that he will have a useful contributing perspective on any software technology problem. Lyndon is also an amateur cellist and finds inspiration from musicality in the art of the expressive construction of beautiful programs."
    },
    {
      "time": "13:30-17:00",
      "id": "geoff-javier",
      "name": "Geoffrey Huntley",
      "name2": "Javier Candeira",
      "img": "/assets/img/2019-melbourne/ghuntley.jpg",
      "img2": "/assets/img/2019-melbourne/candeira.jpg",
      "title": "WORKSHOP - Introduction to Nix and NixOS",
      "abstract":
        "The Nix/NixOS ecosystem is a new way of building software.<br/><br/> Nix is a powerful package manager for Linux and other Unix systems that makes package management reliable and reproducible. It provides atomic upgrades and rollbacks, side-by-side installation of multiple versions of a package, multi-user package management and easy setup of build environments. <br/><br /> NixOS is a Linux distribution with a unique approach to package and configuration management. Built on top of the Nix package manager, it is completely declarative, makes upgrading systems reliable, and has many other advantages. <br/><br/> This workshop introduces attendees to using, developing on, and developing for Nix and Nixos. <br /><br /> Some knowledge of unix-like command lines and some programming experience are required, but we'll assume no prior knowledge of Nix and NixOS themselves. <br /> <br /> Please bring your laptop with a recent copy of VirtualBox installed on it.",
      "level": 1,
      "bio":
        "Geoff is a software engineer who over the years has sysadmin'ed Tru64, Solaris, AIX, FreeBSD, HP-UX, RedHat and Debian/Ubuntu boxes. The Queensland FP Lab folks introduced him to NixOS about a year ago and he's super glad that they did.",
      "bio2":
        "Javier is a software developer living and working in Melbourne. He likes short bios.",
    },
    {
      "time": "12:30-17:00",
      "heading": "Hang Out and Hack Room",
      "id": "hand-out-and-hack",
      "blurb":
	"Our Hang Out and Hack room will include: \"office hours\" (people can request help on particular topics, or offer to help others); lightning talks, free discussion and of course &mdash; hanging out and hacking&hellip; Bring your laptop!",
      "location": "TBC"
    },

    {
      "time": "13:30~15:30",
      "heading": "Unconference",
      "id": "unconference",
      "blurb":
	"The unconference is like open-mic for hackers. It's open for anyone to do a talk, just add your name to the list near the registration desk on the day of the conference.",
      "location": "<a href='https://goo.gl/maps/bZ13aL7EVm32'>RMIT - Building 80</a>"
    }
]

}
